interface WeatherData {
  temperature: number;
  condition: string;
  humidity: number;
  windSpeed: number;
  icon: string;
  description: string;
  forecast?: DayForecast[];
}

interface DayForecast {
  time: string;
  temperature: number;
  condition: string;
  icon: string;
  precipitation?: number;
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const WEATHER_API_KEY = import.meta.env.VITE_WEATHER_API_KEY;

// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ (5 –º–∏–Ω—É—Ç)
const CACHE_DURATION = 5 * 60 * 1000;
const weatherCache = new Map<string, { data: WeatherData; timestamp: number }>();

// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const validateCity = (city: string): boolean => {
  return typeof city === 'string' && city.length > 0 && city.length < 100 && /^[a-zA-Z–∞-—è–ê-–Ø\s-]+$/.test(city);
};

const validateCoordinates = (lat: number, lon: number): boolean => {
  return typeof lat === 'number' && typeof lon === 'number' && 
         lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;
};

export const getWeatherByCity = async (city: string = "Moscow"): Promise<WeatherData> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!validateCity(city)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
    }

    if (!WEATHER_API_KEY) {
      console.warn('Weather API key not configured, using fallback data');
      return getFallbackWeatherData();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `city_${city}`;
    const cached = weatherCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
      return cached.data;
    }

    console.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${city}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    try {
      const [currentResponse, forecastResponse] = await Promise.all([
        fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${WEATHER_API_KEY}&units=metric&lang=ru`, {
          signal: controller.signal
        }),
        fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(city)}&appid=${WEATHER_API_KEY}&units=metric&lang=ru`, {
          signal: controller.signal
        })
      ]);

      clearTimeout(timeoutId);

      if (!currentResponse.ok || !forecastResponse.ok) {
        throw new Error(`HTTP Error: ${currentResponse.status} / ${forecastResponse.status}`);
      }
      
      const currentData = await currentResponse.json();
      const forecastData = await forecastResponse.json();
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API
      if (!currentData.main || !currentData.weather || !Array.isArray(currentData.weather)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø–æ–≥–æ–¥—ã');
      }
      
      console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—É—á–µ–Ω—ã:', currentData);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞)
      const todayForecast: DayForecast[] = (forecastData.list || [])
        .slice(0, 8) // –ü–µ—Ä–≤—ã–µ 8 –∑–∞–ø–∏—Å–µ–π (24 —á–∞—Å–∞ –ø–æ 3 —á–∞—Å–∞)
        .map((item: any) => ({
          time: new Date(item.dt * 1000).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' }),
          temperature: Math.round(item.main?.temp || 0),
          condition: item.weather?.[0]?.description || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          icon: getWeatherIcon(item.weather?.[0]?.main || 'Clear'),
          precipitation: item.pop ? Math.round(item.pop * 100) : 0
        }));
      
      const weatherData: WeatherData = {
        temperature: Math.round(currentData.main.temp),
        condition: currentData.weather[0].description,
        humidity: currentData.main.humidity,
        windSpeed: Math.round(currentData.wind?.speed || 0),
        icon: getWeatherIcon(currentData.weather[0].main),
        description: currentData.weather[0].description,
        forecast: todayForecast
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      weatherCache.set(cacheKey, { data: weatherData, timestamp: Date.now() });
      
      return weatherData;
    } finally {
      clearTimeout(timeoutId);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
    return getFallbackWeatherData();
  }
};

const getWeatherIcon = (condition: string): string => {
  const iconMap: { [key: string]: string } = {
    'Clear': '‚òÄÔ∏è',
    'Clouds': '‚òÅÔ∏è',
    'Rain': 'üåßÔ∏è',
    'Drizzle': 'üå¶Ô∏è',
    'Thunderstorm': '‚õàÔ∏è',
    'Snow': '‚ùÑÔ∏è',
    'Mist': 'üå´Ô∏è',
    'Fog': 'üå´Ô∏è',
    'Haze': 'üå´Ô∏è'
  };
  
  return iconMap[condition] || 'üå§Ô∏è';
};

export const getWeatherByLocation = async (): Promise<WeatherData> => {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
      return;
    }
    
    const timeoutId = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'));
    }, 10000);
    
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        try {
          clearTimeout(timeoutId);
          const { latitude, longitude } = position.coords;
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
          if (!validateCoordinates(latitude, longitude)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
          }

          if (!WEATHER_API_KEY) {
            resolve(getFallbackWeatherData());
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
          const cacheKey = `coords_${latitude.toFixed(2)}_${longitude.toFixed(2)}`;
          const cached = weatherCache.get(cacheKey);
          if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
            resolve(cached.data);
            return;
          }

          console.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${latitude}, ${longitude}`);
          
          const controller = new AbortController();
          const apiTimeoutId = setTimeout(() => controller.abort(), 10000);

          try {
            const [currentResponse, forecastResponse] = await Promise.all([
              fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric&lang=ru`, {
                signal: controller.signal
              }),
              fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${WEATHER_API_KEY}&units=metric&lang=ru`, {
                signal: controller.signal
              })
            ]);

            clearTimeout(apiTimeoutId);
            
            if (!currentResponse.ok || !forecastResponse.ok) {
              throw new Error(`HTTP Error: ${currentResponse.status} / ${forecastResponse.status}`);
            }
            
            const currentData = await currentResponse.json();
            const forecastData = await forecastResponse.json();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if (!currentData.main || !currentData.weather) {
              throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø–æ–≥–æ–¥—ã');
            }
            
            const todayForecast: DayForecast[] = (forecastData.list || [])
              .slice(0, 8)
              .map((item: any) => ({
                time: new Date(item.dt * 1000).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' }),
                temperature: Math.round(item.main?.temp || 0),
                condition: item.weather?.[0]?.description || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                icon: getWeatherIcon(item.weather?.[0]?.main || 'Clear'),
                precipitation: item.pop ? Math.round(item.pop * 100) : 0
              }));
            
            const weatherData: WeatherData = {
              temperature: Math.round(currentData.main.temp),
              condition: currentData.weather[0].description,
              humidity: currentData.main.humidity,
              windSpeed: Math.round(currentData.wind?.speed || 0),
              icon: getWeatherIcon(currentData.weather[0].main),
              description: currentData.weather[0].description,
              forecast: todayForecast
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            weatherCache.set(cacheKey, { data: weatherData, timestamp: Date.now() });
            
            resolve(weatherData);
          } finally {
            clearTimeout(apiTimeoutId);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
          resolve(getFallbackWeatherData());
        }
      },
      (error) => {
        clearTimeout(timeoutId);
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'));
      },
      {
        timeout: 10000,
        enableHighAccuracy: false,
        maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
      }
    );
  });
};

// Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
const getFallbackWeatherData = (): WeatherData => {
  return {
    temperature: 15,
    condition: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    humidity: 65,
    windSpeed: 5,
    icon: "üå§Ô∏è",
    description: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    forecast: [
      {
        time: "12:00",
        temperature: 16,
        condition: "—è—Å–Ω–æ",
        icon: "‚òÄÔ∏è",
        precipitation: 0
      },
      {
        time: "15:00",
        temperature: 18,
        condition: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        icon: "üå§Ô∏è",
        precipitation: 10
      },
      {
        time: "18:00",
        temperature: 14,
        condition: "–æ–±–ª–∞—á–Ω–æ",
        icon: "‚òÅÔ∏è",
        precipitation: 20
      }
    ]
  };
};

export const getClothingRecommendations = (weather: WeatherData): string[] => {
  const recommendations: string[] = [];
  const temp = weather.temperature;
  const condition = weather.condition.toLowerCase();
  
  // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ
  if (temp <= -10) {
    recommendations.push("üß• –¢–µ–ø–ª–∞—è –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø—É—Ö–æ–≤–∏–∫");
    recommendations.push("üß£ –®–∞—Ä—Ñ –∏ —à–∞–ø–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    recommendations.push("üß§ –¢–µ–ø–ª—ã–µ –ø–µ—Ä—á–∞—Ç–∫–∏");
    recommendations.push("üë¢ –ó–∏–º–Ω—è—è –æ–±—É–≤—å");
  } else if (temp <= 0) {
    recommendations.push("üß• –ó–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞");
    recommendations.push("üß£ –®–∞—Ä—Ñ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è");
    recommendations.push("üë¢ –£—Ç–µ–ø–ª–µ–Ω–Ω–∞—è –æ–±—É–≤—å");
  } else if (temp <= 10) {
    recommendations.push("üß• –î–µ–º–∏—Å–µ–∑–æ–Ω–Ω–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–∞–ª—å—Ç–æ");
    recommendations.push("üëñ –¢–µ–ø–ª—ã–µ –±—Ä—é–∫–∏");
    recommendations.push("üëû –ó–∞–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å");
  } else if (temp <= 20) {
    recommendations.push("üëï –õ–µ–≥–∫–∞—è –∫–æ—Ñ—Ç–∞ –∏–ª–∏ —Å–≤–∏—Ç–µ—Ä");
    recommendations.push("üëñ –î–∂–∏–Ω—Å—ã –∏–ª–∏ –±—Ä—é–∫–∏");
    recommendations.push("üëü –£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å");
  } else if (temp <= 25) {
    recommendations.push("üëï –§—É—Ç–±–æ–ª–∫–∞ –∏–ª–∏ —Ä—É–±–∞—à–∫–∞");
    recommendations.push("üëñ –õ–µ–≥–∫–∏–µ –±—Ä—é–∫–∏ –∏–ª–∏ –¥–∂–∏–Ω—Å—ã");
    recommendations.push("üëü –õ–µ–≥–∫–∞—è –æ–±—É–≤—å");
  } else {
    recommendations.push("üëï –õ–µ–≥–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞");
    recommendations.push("ü©≥ –®–æ—Ä—Ç—ã –∏–ª–∏ –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏");
    recommendations.push("üë° –û—Ç–∫—Ä—ã—Ç–∞—è –æ–±—É–≤—å");
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
  if (condition.includes('–¥–æ–∂–¥—å') || condition.includes('–ª–∏–≤–µ–Ω—å')) {
    recommendations.push("‚òî –ó–æ–Ω—Ç –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫");
    recommendations.push("üë¢ –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å");
  }
  
  if (condition.includes('—Å–Ω–µ–≥')) {
    recommendations.push("‚ùÑÔ∏è –¢–µ–ø–ª–∞—è –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å");
    recommendations.push("üß• –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –æ–¥–µ–∂–¥—ã");
  }
  
  if (weather.windSpeed > 5) {
    recommendations.push("üå™Ô∏è –í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω–∞—è –∫—É—Ä—Ç–∫–∞");
  }
  
  return recommendations;
};

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
export const clearWeatherCache = (): void => {
  weatherCache.clear();
};