
import React, { useState, useEffect, useRef } from 'react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Mic, MicOff, Volume2, MessageSquare, Sparkles, User } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  text: string;
  type: 'user' | 'assistant';
  timestamp: Date;
  outfitSuggestion?: {
    items: string[];
    reason: string;
    imageUrl?: string;
  };
}

export const VoiceOutfitAssistant = () => {
  const [isListening, setIsListening] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [permissionStatus, setPermissionStatus] = useState<'prompt' | 'granted' | 'denied'>('prompt');
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const { toast } = useToast();

  useEffect(() => {
    initializeSpeechRecognition();
  }, []);

  const initializeSpeechRecognition = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω
      const permission = await navigator.mediaDevices.getUserMedia({ audio: true });
      permission.getTracks().forEach(track => track.stop());
      
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      
      if (SpeechRecognition) {
        const recognition = new SpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'ru-RU';

        recognition.onstart = () => {
          setIsListening(true);
          toast({
            description: "üé§ –°–ª—É—à–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
          });
        };

        recognition.onend = () => {
          setIsListening(false);
        };

        recognition.onresult = (event: SpeechRecognitionEvent) => {
          const transcript = event.results[0][0].transcript;
          handleUserMessage(transcript);
        };

        recognition.onerror = (event: SpeechRecognitionErrorEvent) => {
          console.error('Speech recognition error:', event.error);
          setIsListening(false);
          
          if (event.error === 'not-allowed') {
            setPermissionStatus('denied');
            toast({
              title: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É",
              description: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞",
              duration: 5000,
            });
          }
        };

        recognitionRef.current = recognition;
        setIsConnected(true);
        setPermissionStatus('granted');
      }
    } catch (error) {
      console.error('Microphone access denied:', error);
      setPermissionStatus('denied');
      toast({
        title: "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        description: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞",
        duration: 5000,
      });
    }
  };

  const handleUserMessage = async (text: string) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text,
      type: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    setTimeout(() => {
      const response = generateOutfitResponse(text);
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response.text,
        type: 'assistant',
        timestamp: new Date(),
        outfitSuggestion: response.outfit
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      speakText(response.text);
    }, 1500);
  };

  const generateOutfitResponse = (userText: string) => {
    const lowerText = userText.toLowerCase();
    
    if (lowerText.includes('–¥–µ–ª–æ–≤–æ–π') || lowerText.includes('–æ—Ñ–∏—Å') || lowerText.includes('—Ä–∞–±–æ—Ç')) {
      return {
        text: '–î–ª—è –¥–µ–ª–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ—Å—Ç—é–º –≤ —Ç–µ–º–Ω—ã—Ö —Ç–æ–Ω–∞—Ö, –±–µ–ª—É—é —Ä—É–±–∞—à–∫—É –∏ —Ç—É—Ñ–ª–∏.',
        outfit: {
          items: ['–¢–µ–º–Ω—ã–π –∫–æ—Å—Ç—é–º', '–ë–µ–ª–∞—è —Ä—É–±–∞—à–∫–∞', '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç—É—Ñ–ª–∏', '–ö–æ–∂–∞–Ω—ã–π —Ä–µ–º–µ–Ω—å'],
          reason: '–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å –¥–ª—è –æ—Ñ–∏—Å–∞',
          imageUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=400&fit=crop'
        }
      };
    } else if (lowerText.includes('–ø—Ä–æ–≥—É–ª–∫') || lowerText.includes('–∫—ç–∂—É–∞–ª') || lowerText.includes('–ø–æ–≤—Å–µ–¥–Ω–µ–≤')) {
      return {
        text: '–î–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç –¥–∂–∏–Ω—Å—ã, —É–¥–æ–±–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏.',
        outfit: {
          items: ['–î–∂–∏–Ω—Å—ã', '–•–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞', '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', '–õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞'],
          reason: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫',
          imageUrl: 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=300&h=400&fit=crop'
        }
      };
    } else if (lowerText.includes('–≤–µ—á–µ—Ä') || lowerText.includes('—Å–≤–∏–¥–∞–Ω–∏') || lowerText.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω')) {
      return {
        text: '–ù–∞ –≤–µ—á–µ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞—é —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –ø–ª–∞—Ç—å–µ –∏–ª–∏ —Ä—É–±–∞—à–∫—É —Å –±—Ä—é–∫–∞–º–∏ –∏ —Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã.',
        outfit: {
          items: ['–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ –ø–ª–∞—Ç—å–µ', '–¢—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ', '–ö–ª–∞—Ç—á', '–£–∫—Ä–∞—à–µ–Ω–∏—è'],
          reason: '–í–µ—á–µ—Ä–Ω–∏–π –æ–±—Ä–∞–∑ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è',
          imageUrl: 'https://images.unsplash.com/photo-1515372039744-b8f02a3ae446?w=300&h=400&fit=crop'
        }
      };
    } else {
      return {
        text: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –ø–ª–∞–Ω–∞—Ö! –ö—É–¥–∞ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å: –Ω–∞ —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≥—É–ª–∫—É –∏–ª–∏ –æ—Å–æ–±–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?',
        outfit: {
          items: ['–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–∂–∏–Ω—Å—ã', '–ë–∞–∑–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞', '–£–¥–æ–±–Ω–∞—è –æ–±—É–≤—å'],
          reason: '–ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
        }
      };
    }
  };

  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.9;
      speechSynthesis.speak(utterance);
    }
  };

  const startListening = async () => {
    if (permissionStatus === 'denied') {
      await initializeSpeechRecognition();
    }
    
    if (recognitionRef.current && !isListening) {
      try {
        recognitionRef.current.start();
      } catch (error) {
        console.error('Error starting recognition:', error);
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏",
        });
      }
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
    }
  };

  if (permissionStatus === 'denied') {
    return (
      <Card className="p-8 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
        <div className="text-center">
          <Mic className="w-16 h-16 mx-auto mb-4 text-purple-400" />
          <h3 className="text-xl font-semibold text-gray-800 mb-2">–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
          <p className="text-gray-600 mb-4">–î–ª—è —Ä–∞–±–æ—Ç—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É</p>
          <Button onClick={initializeSpeechRecognition} className="bg-purple-600 hover:bg-purple-700">
            –†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
          </Button>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6 bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="p-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full">
            <Sparkles className="w-6 h-6 text-white" />
          </div>
          <div>
            <h2 className="text-2xl font-bold text-gray-800">–ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç–∏–ª–∏—Å—Ç</h2>
            <div className="flex items-center space-x-2">
              <Badge variant={isConnected ? "default" : "destructive"} className="text-xs">
                {isConnected ? "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" : "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
              </Badge>
              {isListening && (
                <Badge className="text-xs bg-red-500 animate-pulse">
                  –°–ª—É—à–∞—é...
                </Badge>
              )}
            </div>
          </div>
        </div>
        
        <Button
          onClick={isListening ? stopListening : startListening}
          disabled={!isConnected}
          size="lg"
          className={`${isListening 
            ? 'bg-red-600 hover:bg-red-700 animate-pulse' 
            : 'bg-purple-600 hover:bg-purple-700'
          } px-6 py-3`}
        >
          {isListening ? (
            <>
              <MicOff className="w-5 h-5 mr-2" />
              –°—Ç–æ–ø
            </>
          ) : (
            <>
              <Mic className="w-5 h-5 mr-2" />
              –ì–æ–≤–æ—Ä–∏—Ç—å
            </>
          )}
        </Button>
      </div>

      {messages.length === 0 ? (
        <div className="text-center py-12 text-gray-600">
          <Volume2 className="w-20 h-20 mx-auto mb-4 text-purple-300" />
          <h3 className="text-xl font-semibold mb-2">–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –æ–±—Ä–∞–∑–∞!</h3>
          <p className="mb-4">–ù–∞–∂–º–∏—Ç–µ "–ì–æ–≤–æ—Ä–∏—Ç—å" –∏ —Å–∫–∞–∂–∏—Ç–µ:</p>
          <div className="space-y-2 text-sm">
            <p>"–ß—Ç–æ –Ω–∞–¥–µ—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É?"</p>
            <p>"–ü–æ–¥–±–µ—Ä–∏ –æ–±—Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏"</p>
            <p>"–ß—Ç–æ –æ–¥–µ—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ?"</p>
          </div>
        </div>
      ) : (
        <div className="space-y-4 max-h-96 overflow-y-auto">
          {messages.map((message) => (
            <div key={message.id} className="space-y-3">
              <div className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-xs px-4 py-3 rounded-2xl ${
                  message.type === 'user'
                    ? 'bg-purple-600 text-white'
                    : 'bg-white text-gray-800 shadow-md border'
                }`}>
                  <div className="flex items-center space-x-2 mb-1">
                    {message.type === 'assistant' && <User className="w-4 h-4 text-purple-600" />}
                    <p className="text-sm font-medium">
                      {message.type === 'user' ? '–í—ã' : '–°—Ç–∏–ª–∏—Å—Ç'}
                    </p>
                  </div>
                  <p className="text-sm">{message.text}</p>
                  <p className="text-xs opacity-70 mt-2">
                    {message.timestamp.toLocaleTimeString('ru', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                </div>
              </div>
              
              {message.outfitSuggestion && (
                <div className="bg-white rounded-xl p-4 shadow-md border ml-4">
                  <h4 className="font-semibold text-gray-800 mb-2">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑:</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-gray-600 mb-2">{message.outfitSuggestion.reason}</p>
                      <div className="flex flex-wrap gap-2">
                        {message.outfitSuggestion.items.map((item, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {item}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    {message.outfitSuggestion.imageUrl && (
                      <div className="flex justify-center">
                        <img 
                          src={message.outfitSuggestion.imageUrl} 
                          alt="–û–±—Ä–∞–∑" 
                          className="w-24 h-32 object-cover rounded-lg shadow-sm"
                        />
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      )}
    </Card>
  );
};
