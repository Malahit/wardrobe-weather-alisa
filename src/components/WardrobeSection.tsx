
import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { useWardrobe, WardrobeItem } from "@/hooks/useWardrobe";

const categoryLabels = {
  top: '–í–µ—Ä—Ö',
  bottom: '–ù–∏–∑', 
  shoes: '–û–±—É–≤—å',
  outerwear: '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞',
  accessories: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'
};

const seasonLabels = {
  spring: '–í–µ—Å–Ω–∞',
  summer: '–õ–µ—Ç–æ',
  autumn: '–û—Å–µ–Ω—å',
  winter: '–ó–∏–º–∞',
  'all-season': '–í—Å–µ—Å–µ–∑–æ–Ω'
};

export const WardrobeSection = () => {
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [newItem, setNewItem] = useState({
    name: "",
    category: "" as WardrobeItem['category'],
    color: "",
    season: "" as WardrobeItem['season'],
    brand: "",
    temperature_min: "",
    temperature_max: ""
  });
  
  const { toast } = useToast();
  const { items, loading, addItem, removeItem } = useWardrobe();

  const handleAddItem = async () => {
    if (!newItem.name || !newItem.category || !newItem.color || !newItem.season) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    const itemData = {
      name: newItem.name,
      category: newItem.category,
      color: newItem.color,
      season: newItem.season,
      brand: newItem.brand || undefined,
      temperature_min: newItem.temperature_min ? parseInt(newItem.temperature_min) : undefined,
      temperature_max: newItem.temperature_max ? parseInt(newItem.temperature_max) : undefined,
    };

    const result = await addItem(itemData);
    
    if (result.success) {
      setNewItem({ 
        name: "", 
        category: "" as WardrobeItem['category'], 
        color: "", 
        season: "" as WardrobeItem['season'], 
        brand: "",
        temperature_min: "",
        temperature_max: ""
      });
      setIsAddModalOpen(false);
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±"
      });
    } else {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±",
        variant: "destructive"
      });
    }
  };

  const handleRemoveItem = async (id: string) => {
    const result = await removeItem(id);
    
    if (result.success) {
      toast({
        title: "–£–¥–∞–ª–µ–Ω–æ",
        description: "–í–µ—â—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞"
      });
    } else {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ—â—å",
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return (
      <Card className="p-6 bg-white/10 backdrop-blur-lg border-white/20">
        <div className="text-center py-12 text-white/60">
          <p className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞...</p>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6 bg-white/10 backdrop-blur-lg border-white/20">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-white">–ú–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±</h2>
        <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>
          <DialogTrigger asChild>
            <Button className="bg-white/20 hover:bg-white/30 text-white border-white/30">
              –î–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å
            </Button>
          </DialogTrigger>
          <DialogContent className="bg-white">
            <DialogHeader>
              <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—â—å</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ*</Label>
                <Input
                  id="name"
                  value={newItem.name}
                  onChange={(e) => setNewItem({...newItem, name: e.target.value})}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–∞—è —Ä—É–±–∞—à–∫–∞"
                />
              </div>
              <div>
                <Label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è*</Label>
                <Select onValueChange={(value) => setNewItem({...newItem, category: value as WardrobeItem['category']})}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="top">–í–µ—Ä—Ö</SelectItem>
                    <SelectItem value="bottom">–ù–∏–∑</SelectItem>
                    <SelectItem value="shoes">–û–±—É–≤—å</SelectItem>
                    <SelectItem value="outerwear">–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞</SelectItem>
                    <SelectItem value="accessories">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="color">–¶–≤–µ—Ç*</Label>
                <Input
                  id="color"
                  value={newItem.color}
                  onChange={(e) => setNewItem({...newItem, color: e.target.value})}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω—ã–π"
                />
              </div>
              <div>
                <Label htmlFor="season">–°–µ–∑–æ–Ω*</Label>
                <Select onValueChange={(value) => setNewItem({...newItem, season: value as WardrobeItem['season']})}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="spring">–í–µ—Å–Ω–∞</SelectItem>
                    <SelectItem value="summer">–õ–µ—Ç–æ</SelectItem>
                    <SelectItem value="autumn">–û—Å–µ–Ω—å</SelectItem>
                    <SelectItem value="winter">–ó–∏–º–∞</SelectItem>
                    <SelectItem value="all-season">–í—Å–µ—Å–µ–∑–æ–Ω</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="brand">–ë—Ä–µ–Ω–¥</Label>
                <Input
                  id="brand"
                  value={newItem.brand}
                  onChange={(e) => setNewItem({...newItem, brand: e.target.value})}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Zara"
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="temp-min">–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)</Label>
                  <Input
                    id="temp-min"
                    type="number"
                    value={newItem.temperature_min}
                    onChange={(e) => setNewItem({...newItem, temperature_min: e.target.value})}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: -10"
                  />
                </div>
                <div>
                  <Label htmlFor="temp-max">–ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)</Label>
                  <Input
                    id="temp-max"
                    type="number"
                    value={newItem.temperature_max}
                    onChange={(e) => setNewItem({...newItem, temperature_max: e.target.value})}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25"
                  />
                </div>
              </div>
              <Button onClick={handleAddItem} className="w-full">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {items.length === 0 ? (
        <div className="text-center py-12 text-white/60">
          <p className="text-lg mb-4">–í–∞—à –≥–∞—Ä–¥–µ—Ä–æ–± –ø—É—Å—Ç</p>
          <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –≤–µ—â—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –æ–±—Ä–∞–∑–æ–≤!</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {items.map((item) => (
            <Card key={item.id} className="p-4 bg-white/10 border-white/20 hover:bg-white/15 transition-all hover-scale">
              <div className="flex items-center space-x-3">
                <div className="w-16 h-16 bg-white/20 rounded-lg flex items-center justify-center">
                  <span className="text-2xl">üëï</span>
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-white">{item.name}</h3>
                  {item.brand && (
                    <p className="text-sm text-white/70 mb-2">{item.brand}</p>
                  )}
                  <div className="flex flex-wrap gap-1 mb-2">
                    <Badge variant="secondary" className="text-xs bg-white/20 text-white/80">
                      {categoryLabels[item.category]}
                    </Badge>
                    <Badge variant="secondary" className="text-xs bg-white/20 text-white/80">
                      {item.color}
                    </Badge>
                    <Badge variant="secondary" className="text-xs bg-white/20 text-white/80">
                      {seasonLabels[item.season]}
                    </Badge>
                  </div>
                  {(item.temperature_min || item.temperature_max) && (
                    <p className="text-xs text-white/60 mb-2">
                      {item.temperature_min && item.temperature_max 
                        ? `${item.temperature_min}¬∞C - ${item.temperature_max}¬∞C`
                        : item.temperature_min 
                        ? `–æ—Ç ${item.temperature_min}¬∞C`
                        : `–¥–æ ${item.temperature_max}¬∞C`
                      }
                    </p>
                  )}
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveItem(item.id)}
                    className="mt-2 text-white/60 hover:text-white hover:bg-white/10"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </Button>
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}
    </Card>
  );
};
