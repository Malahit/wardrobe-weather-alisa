import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useOutfitTemplates } from "@/hooks/useOutfitTemplates";
import { useOutfitItems } from "@/hooks/useOutfitItems";
import { Heart, ShoppingBag, Star, Thermometer, Cloud, Sun, RefreshCw, Shuffle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { ErrorBoundary } from "@/components/ui/error-boundary";
import { LoadingSpinner } from "@/components/ui/loading-spinner";
import { LazyImage } from "@/components/LazyImage";
import { useErrorHandler } from "@/hooks/useErrorHandler";
import { AccessibleButton } from "@/components/AccessibleButton";

interface EnhancedOutfitGalleryProps {
  weather: any;
}

export const EnhancedOutfitGallery = ({ weather }: EnhancedOutfitGalleryProps) => {
  const { templates, loading, fetchTemplates, submitTrainingData } = useOutfitTemplates();
  const { getItemsByTemplate } = useOutfitItems();
  const { toast } = useToast();
  const { handleAsyncError } = useErrorHandler();
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [lastRefresh, setLastRefresh] = useState<number>(Date.now());

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
  useEffect(() => {
    const interval = setInterval(() => {
      console.log('Auto-refreshing outfits...');
      handleAsyncError(
        () => fetchTemplates(weather, false),
        { showToast: false }
      );
      setLastRefresh(Date.now());
    }, 120000); // 2 –º–∏–Ω—É—Ç—ã

    return () => clearInterval(interval);
  }, [weather, fetchTemplates, handleAsyncError]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã
  useEffect(() => {
    if (weather) {
      console.log('üå§Ô∏è Weather changed, fetching new outfits...', weather);
      handleAsyncError(
        () => fetchTemplates(weather, false),
        { showToast: false }
      );
    }
  }, [weather?.condition, weather?.temperature, fetchTemplates, handleAsyncError]);

  const handleLikeOutfit = async (templateId: string, rating: number) => {
    await handleAsyncError(async () => {
      await submitTrainingData(templateId, `–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –æ–±—Ä–∞–∑`, rating, weather);
      toast({
        title: "–°–ø–∞—Å–∏–±–æ!",
        description: "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      });
    });
  };

  const handleRefreshOutfits = () => {
    console.log('Manual refresh triggered');
    handleAsyncError(
      () => fetchTemplates(weather, true),
      { fallbackMessage: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑—ã' }
    );
    setLastRefresh(Date.now());
  };

  const getWeatherIcon = (conditions: string[]) => {
    if (conditions.includes('clear') || conditions.includes('sunny')) return <Sun className="w-4 h-4" />;
    if (conditions.includes('rain') || conditions.includes('light-rain')) return <Cloud className="w-4 h-4" />;
    if (conditions.includes('snow')) return <div className="w-4 h-4 text-center">‚ùÑÔ∏è</div>;
    return <Cloud className="w-4 h-4" />;
  };

  const getSeasonEmoji = (season: string) => {
    switch (season) {
      case 'spring': return 'üå±';
      case 'summer': return '‚òÄÔ∏è';
      case 'autumn': return 'üçÇ';
      case 'winter': return '‚ùÑÔ∏è';
      default: return 'üåü';
    }
  };

  const getStyleEmoji = (style: string) => {
    switch (style) {
      case 'casual': return 'üëï';
      case 'business': return 'üíº';
      case 'formal': return 'üé©';
      case 'sporty': return 'üèÉ‚Äç‚ôÄÔ∏è';
      case 'romantic': return 'üíï';
      case 'street': return 'üõπ';
      case 'boho': return 'üå∫';
      default: return '‚ú®';
    }
  };

  if (loading) {
    return (
      <Card className="p-6 bg-white/10 backdrop-blur-lg border-white/20">
        <div className="text-center py-12 text-white/60">
          <LoadingSpinner size="lg" className="mx-auto mb-4 text-white/20" />
          <p className="text-lg">–ü–æ–¥–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã...</p>
          <p className="text-sm mt-2">–£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –∏ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</p>
          <p className="text-xs mt-4 opacity-60">
            –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞–∑–æ–≤: {templates.length}
          </p>
        </div>
      </Card>
    );
  }

  return (
    <ErrorBoundary>
      <Card className="p-6 bg-white/10 backdrop-blur-lg border-white/20">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center space-x-2">
            <span className="text-2xl" role="img" aria-label="sparkles">‚ú®</span>
            <h2 className="text-2xl font-bold text-white">–ì–∞–ª–µ—Ä–µ—è –æ–±—Ä–∞–∑–æ–≤</h2>
            <Shuffle className="w-5 h-5 text-white/60" aria-hidden="true" />
          </div>
          <div className="flex items-center space-x-4">
            <Badge variant="secondary" className="bg-white/20 text-white/80">
              {templates.length} –æ–±—Ä–∞–∑–æ–≤
            </Badge>
            <div className="text-xs text-white/60">
              –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(lastRefresh).toLocaleTimeString()}
            </div>
            <AccessibleButton
              onClick={handleRefreshOutfits}
              className="bg-white/20 hover:bg-white/30 text-white border-white/30"
              size="sm"
              ariaLabel="–û–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑—ã"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              –ù–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
            </AccessibleButton>
          </div>
        </div>

        {weather && (
          <div className="mb-6 p-4 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-lg border border-blue-400/30">
            <div className="flex items-center space-x-4 text-white/80">
              <div className="flex items-center space-x-2">
                <Thermometer className="w-4 h-4" />
                <span>{weather.temperature}¬∞C</span>
              </div>
              <div className="flex items-center space-x-2">
                {getWeatherIcon([weather.condition])}
                <span className="capitalize">{weather.condition}</span>
              </div>
              <span className="text-sm">–û–±—Ä–∞–∑—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</span>
              <div className="flex items-center space-x-1 text-xs">
                <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span>Live</span>
              </div>
            </div>
          </div>
        )}

        {templates.length === 0 ? (
          <div className="text-center py-12 text-white/60">
            <div className="w-20 h-20 bg-white/10 rounded-full mx-auto mb-4 flex items-center justify-center">
              <span className="text-3xl" role="img" aria-label="art palette">üé®</span>
            </div>
            <p className="text-lg mb-2">–û–±—Ä–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî</p>
            <p className="mb-4">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
            <div className="text-xs text-white/40 space-y-1">
              <p>–ü–æ–≥–æ–¥–∞: {weather?.condition} {weather?.temperature}¬∞C</p>
              <p>–ó–∞–≥—Ä—É–∑–∫–∞: {loading ? '–î–∞' : '–ù–µ—Ç'}</p>
              <p>–í—Å–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤: {templates.length}</p>
            </div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {templates.map((template, index) => {
              const items = getItemsByTemplate(template.id);
              
              return (
                <Card 
                  key={`${template.id}-${lastRefresh}-${index}`}
                  className={`p-4 transition-all duration-500 hover:shadow-xl hover:scale-105 ${
                    selectedTemplate === template.id 
                      ? 'ring-2 ring-pink-400 bg-pink-50/20' 
                      : 'bg-white/10 border-white/20 hover:bg-white/15'
                  } animate-fade-in cursor-pointer`}
                  style={{
                    animationDelay: `${index * 100}ms`
                  }}
                  onClick={() => setSelectedTemplate(selectedTemplate === template.id ? null : template.id)}
                  role="button"
                  tabIndex={0}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                      e.preventDefault();
                      setSelectedTemplate(selectedTemplate === template.id ? null : template.id);
                    }
                  }}
                  aria-label={`–û–±—Ä–∞–∑: ${template.name}`}
                >
                  
                  <div className="relative mb-4">
                    <LazyImage
                      src={template.image_url}
                      alt={template.name}
                      className="w-full h-64 object-cover rounded-lg"
                    />
                    <div className="absolute top-2 right-2 flex space-x-1">
                      <Badge className="bg-black/60 text-white text-xs">
                        {getSeasonEmoji(template.season)} {template.season}
                      </Badge>
                    </div>
                    <div className="absolute bottom-2 left-2">
                      <Badge className="bg-purple-600/80 text-white text-xs">
                        {getStyleEmoji(template.style_category)} {template.style_category}
                      </Badge>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <div>
                      <h3 className="font-bold text-white text-lg leading-tight">{template.name}</h3>
                      <p className="text-white/70 text-sm mt-1">{template.description}</p>
                    </div>

                    {/* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω */}
                    {(template.temperature_min || template.temperature_max) && (
                      <div className="flex items-center space-x-2 text-white/60 text-sm">
                        <Thermometer className="w-4 h-4" />
                        <span>
                          {template.temperature_min}¬∞C - {template.temperature_max}¬∞C
                        </span>
                      </div>
                    )}

                    {/* –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è */}
                    <div className="flex flex-wrap gap-1">
                      {template.weather_conditions.map((condition, idx) => (
                        <Badge key={idx} variant="secondary" className="text-xs bg-blue-500/20 text-blue-200">
                          {getWeatherIcon([condition])} {condition}
                        </Badge>
                      ))}
                    </div>

                    {/* –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ */}
                    <div className="flex items-center space-x-2">
                      <span className="text-white/60 text-sm">–¶–≤–µ—Ç–∞:</span>
                      <div className="flex space-x-1">
                        {template.color_palette.slice(0, 4).map((color, idx) => (
                          <div
                            key={idx}
                            className="w-4 h-4 rounded-full border border-white/30"
                            style={{ backgroundColor: color === 'navy' ? '#000080' : color === 'burgundy' ? '#800020' : color }}
                            title={color}
                          />
                        ))}
                      </div>
                    </div>

                    {/* –í–µ—â–∏ */}
                    <div className="space-y-2">
                      <span className="text-white/60 text-sm">–°–æ—Å—Ç–∞–≤ –æ–±—Ä–∞–∑–∞:</span>
                      <div className="flex flex-wrap gap-1">
                        {template.clothing_items.slice(0, 3).map((item, idx) => (
                          <Badge key={idx} variant="secondary" className="text-xs bg-green-500/20 text-green-200">
                            {item}
                          </Badge>
                        ))}
                        {template.clothing_items.length > 3 && (
                          <Badge variant="secondary" className="text-xs bg-gray-500/20 text-gray-200">
                            +{template.clothing_items.length - 3} –µ—â–µ
                          </Badge>
                        )}
                      </div>
                    </div>

                    {/* –°–æ–≤–µ—Ç—ã —Å—Ç–∏–ª–∏—Å—Ç–∞ */}
                    {template.style_tips && (
                      <div className="p-3 bg-white/10 rounded-lg">
                        <p className="text-white/80 text-sm italic">
                          üí° {template.style_tips}
                        </p>
                      </div>
                    )}

                    {/* –¢–æ–≤–∞—Ä—ã */}
                    {items.length > 0 && (
                      <div className="space-y-2">
                        <span className="text-white/60 text-sm">–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</span>
                        <div className="flex flex-wrap gap-1">
                          {items.slice(0, 2).map((item) => (
                            <Badge key={item.id} variant="secondary" className="text-xs bg-orange-500/20 text-orange-200">
                              {item.item_name} - {item.price}‚ÇΩ
                            </Badge>
                          ))}
                          {items.length > 2 && (
                            <Badge variant="secondary" className="text-xs bg-orange-500/20 text-orange-200">
                              +{items.length - 2} —Ç–æ–≤–∞—Ä–æ–≤
                            </Badge>
                          )}
                        </div>
                      </div>
                    )}

                    {/* –î–µ–π—Å—Ç–≤–∏—è */}
                    <div className="flex justify-between items-center pt-2">
                      <div className="flex space-x-1" role="group" aria-label="–û—Ü–µ–Ω–∏—Ç—å –æ–±—Ä–∞–∑">
                        {[1, 2, 3, 4, 5].map((rating) => (
                          <AccessibleButton
                            key={rating}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleLikeOutfit(template.id, rating);
                            }}
                            className="text-yellow-400 hover:text-yellow-300 transition-colors p-1"
                            size="sm"
                            ariaLabel={`–û—Ü–µ–Ω–∏—Ç—å –Ω–∞ ${rating} –∑–≤–µ–∑–¥`}
                          >
                            <Star className="w-4 h-4" />
                          </AccessibleButton>
                        ))}
                      </div>
                      <div className="flex space-x-2">
                        <AccessibleButton
                          size="sm"
                          variant="ghost"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleLikeOutfit(template.id, 5);
                          }}
                          className="text-pink-400 hover:text-pink-300 hover:bg-pink-500/20"
                          ariaLabel="–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
                        >
                          <Heart className="w-4 h-4" />
                        </AccessibleButton>
                        {items.length > 0 && (
                          <AccessibleButton
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –ø–æ–∫—É–ø–æ–∫
                            }}
                            className="bg-green-600 hover:bg-green-700 text-white"
                            ariaLabel="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º"
                          >
                            <ShoppingBag className="w-4 h-4 mr-1" />
                            –ö—É–ø–∏—Ç—å
                          </AccessibleButton>
                        )}
                      </div>
                    </div>
                  </div>
                </Card>
              );
            })}
          </div>
        )}
      </Card>
    </ErrorBoundary>
  );
};