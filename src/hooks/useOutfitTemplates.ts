
import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface OutfitTemplate {
  id: string;
  name: string;
  description: string | null;
  image_url: string;
  weather_conditions: string[];
  temperature_min: number | null;
  temperature_max: number | null;
  style_category: string;
  season: string;
  occasion: string | null;
  color_palette: string[];
  clothing_items: string[];
  style_tips: string | null;
  source_url: string | null;
  is_approved: boolean | null;
  created_by: string | null;
  created_at: string;
  updated_at: string;
}

export const useOutfitTemplates = () => {
  const [templates, setTemplates] = useState<OutfitTemplate[]>([]);
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  // –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
  const mapWeatherCondition = (russianCondition: string): string | null => {
    const weatherMap: Record<string, string> = {
      '—è—Å–Ω–æ': 'clear',
      '–æ–±–ª–∞—á–Ω–æ': 'cloudy',
      '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': 'partly-cloudy',
      '–¥–æ–∂–¥—å': 'light-rain',
      '—Å–Ω–µ–≥': 'snow',
      '–≤–µ—Ç—Ä–µ–Ω–æ': 'windy',
      '—Ç—É–º–∞–Ω': 'cloudy'
    };
    
    const condition = russianCondition?.toLowerCase();
    return weatherMap[condition] || null;
  };

  const fetchTemplates = async (weather?: any, forceRefresh = false) => {
    setLoading(true);
    try {
      console.log('üé® Fetching outfit templates with weather:', weather);
      console.log('üå°Ô∏è Temperature:', weather?.temperature);
      console.log('‚òÅÔ∏è Condition:', weather?.condition);
      
      // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
      const mappedCondition = weather?.condition ? mapWeatherCondition(weather.condition) : null;
      console.log('üóÇÔ∏è Mapped condition:', weather?.condition, '=>', mappedCondition);
      
      // –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await supabase.rpc('get_random_outfit_templates', {
        weather_condition: mappedCondition,
        temperature: weather?.temperature || null,
        limit_count: 12
      });

      if (error) {
        console.error('‚ùå RPC Error fetching templates:', error);
        console.error('Error details:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        });
        throw error;
      }

      console.log('‚úÖ Fetched templates:', data?.length || 0);
      console.log('üìã Templates data:', data);
      setTemplates(data || []);
      
      if (forceRefresh && data && data.length > 0) {
        toast({
          title: "–û–±—Ä–∞–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
          description: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –ø–æ–¥ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É`,
        });
      }
    } catch (error) {
      console.error('üí• Critical error fetching outfit templates:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º fallback –∑–∞–ø—Ä–æ—Å –±–µ–∑ RPC
      try {
        console.log('üîÑ Trying fallback query...');
        const { data: fallbackData, error: fallbackError } = await supabase
          .from('outfit_templates')
          .select('*')
          .eq('is_approved', true)
          .limit(12);
          
        if (fallbackError) {
          console.error('‚ùå Fallback error:', fallbackError);
        } else {
          console.log('‚úÖ Fallback success:', fallbackData?.length);
          setTemplates(fallbackData || []);
          return;
        }
      } catch (fallbackErr) {
        console.error('üí• Fallback also failed:', fallbackErr);
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—ã: ${error.message}`,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const addTemplate = async (template: Omit<OutfitTemplate, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      const { data, error } = await supabase
        .from('outfit_templates')
        .insert([template])
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "–û–±—Ä–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!",
        description: "–ù–æ–≤—ã–π –æ–±—Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
      });

      return { success: true, data };
    } catch (error) {
      console.error('Error adding template:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑",
        variant: "destructive",
      });
      return { success: false, error };
    }
  };

  const submitTrainingData = async (
    templateId: string,
    feedback: string,
    rating: number,
    weather?: any
  ) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      
      const { error } = await supabase
        .from('stylist_training_data')
        .insert({
          outfit_template_id: templateId,
          user_feedback: feedback,
          rating,
          weather_context: weather ? {
            temperature: weather.temperature,
            condition: weather.condition,
            humidity: weather.humidity
          } : null,
          user_id: user?.id
        });

      if (error) throw error;
    } catch (error) {
      console.error('Error submitting training data:', error);
      throw error;
    }
  };

  useEffect(() => {
    fetchTemplates();
  }, []);

  return {
    templates,
    loading,
    fetchTemplates,
    addTemplate,
    submitTrainingData,
  };
};
